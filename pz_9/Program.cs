using System;

namespace pz_9
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rnd = new Random(); // создание класса рандом
            int[,] A = new int[7, 7]; // создание массива для будущего его заполнения
            int[] S = new int[7]; // создание массива одномерного для боковой диагонали матрицы
            Console.WriteLine("Сначала давайте просто выведем массив, из которого вычленим боковую диагональ!"); // сообщение-объяснение
            Console.WriteLine(); // пустая строчка для разделения
            for (int i = 0; i < 7; i++) // цикл для заполнения массива рандомом
            {
                for (int j = 0; j < 7; j++) // цикл для заполнения массива рандомом
                {
                    A[i, j] = rnd.Next(-50,50); // ограничение рандомных чисел для массива от -50 до 50
                    Console.Write($"A[{i},{j}] = {A[i,j]}\t"); // вывод массива с порядковым названием и табуляция в подарок
                }
                Console.WriteLine(); // ну всё понятно новая строчка типа чтобы красиво!
            }
            Console.WriteLine(); // пустая строчка для отделения части задания
            Console.WriteLine("Переходим к боковой диагонали");
            Console.WriteLine(); // пустая строчка для разделения
            for (int i = 0; i < 7; i++) // цикл для определения боковой диагонали матрицы
            {
                for (int j = 0; j < 7; j++) // цикл для определения боковой диагонали матрицы
                {
                    if (i == 7 - j - 1) // условие на определение боковой диагонали матрицы
                    {
                        S[i] = A[i, j]; // боковая диагональ узнаёт из какой она матрицы
                        Console.WriteLine($"S[{i}] = {S[i]}\t"); // вывод боковой диагонали
                        if (S[i] < 0) // условие на определение отрицательности
                        {
                            Console.WriteLine($"S[{i}] = {S[i]} - отрицательный\t"); // вывод отрицательных элементов боковой диагонали матрицы
                        }
                    }                    
                }
            }
            // здесь я уже запутался и не понял как разделить и нормально вывести отрицательные элементы от всей побочной диагонали и поэтому вот так да и не смог посчитать кол-во отрицательных :(
        }
    }
}
